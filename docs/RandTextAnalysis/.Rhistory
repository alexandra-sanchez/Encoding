install.packages("learnr")
## Packages are groups of functions that you can use.
## We are putting the following packages into the Library to use.
library("RDSTK")
## Packages are groups of functions that you can use.
## We are putting the following packages into the Library to use.
library("RDSTK")
??syuzhet
??twitteR
library("RDSTK")
library("readr")
library("qdap")
library("syuzhet")
library("ggplot2")
library("dplyr")
library(dplyr)
library(qdap)
library(RDSTK)
library(readr)
library(syuzhet)
library(ggplot2)
install.packages(c("lattice", "nlme", "survival"))
# LIBRARIES
# install.packages(pacman)
library(pacman)
pacman::p_load(tm,            # text mining
textmineR,     # text mining
janeaustenr,   # Text of Jane Austen novels
tidyverse,     # Data cleaning & plotting packages (includes ggplot2)
tidytext,      # Sentiment and term frequency analysis
forcats,       # Tools for working with categorical variables
ggpubr)        #
book_words <- austen_books() %>%
unnest_tokens(word, text) %>%   # unnest_tokens() flattens a table into one token per row
count(book, word, sort = TRUE)
book_words <- austen_books() %>%
unnest_tokens(word, text) %>%   # unnest_tokens() flattens a table into one token per row
count(book, word, sort = TRUE)
total_words <- book_words %>%
group_by(book) %>%              # group_by() combines portions of a dataframe into based on specified column
summarize(total = sum(n))
book_words <- left_join(book_words, total_words)
book_words <- left_join(book_words, total_words)
book_words
ggplot(book_words, aes(n/total, fill = book)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~book, ncol = 2, scales = "free_y")
freq_by_rank <- book_words %>%
group_by(book) %>%
mutate(rank = row_number(),
`term frequency` = n/total) %>%
ungroup()
View(freq_by_rank)
freq_by_rank %>%
ggplot(aes(x= rank, y= `term frequency`, color = book)) +
geom_line(size = 1.1, alpha = 0.8, show.legend = FALSE) +
scale_x_log10() +
scale_y_log10()
rank_subset <- freq_by_rank %>%
filter(rank < 500,
rank > 10)
lm(log10(`term frequency`) ~ log10(rank), data = rank_subset)
plot_theme <- theme(legend.position = "bottom",
legend.title = element_text(face="bold",size=24,hjust = 0.5),
legend.text = element_text(size=20,hjust = 0.5),
plot.title = element_text(face="bold",size=24,hjust = 0.5),
strip.text = element_text(size=16,hjust = 0.5),
axis.text.x = element_text(color="black",size=16, angle=0),
axis.title.x = element_text(face="bold",color="black",size=20, angle=0),
axis.text.y = element_text(color="black",size=16, angle=0),
axis.title.y = element_text(face="bold",color="black",size=20, angle=90))
freq_by_rank_plot <- freq_by_rank %>%
ggplot(aes(rank, `term frequency`, color = book)) +
geom_abline(intercept = -0.62, slope = -1.1,
color = "gray50", linetype = 3, size=1.5) +
geom_line(size = 1.1, alpha = 0.8, show.legend = TRUE) +
labs(color="Book") +
scale_x_log10() +
scale_y_log10() +
theme_classic() + plot_theme
ggexport(plotlist = list(freq_by_rank_plot),
filename = "plots/freq_by_rank_plot.png",width=1000,height = 1000)
book_tf_idf <- book_words %>%
bind_tf_idf(word, book, n)
book_tf_idf
book_tf_idf %>%
select(-total) %>%
arrange(desc(tf_idf))
book_tf_idf_plot <- book_tf_idf %>%
group_by(book) %>%
slice_max(tf_idf, n = 15) %>%
ungroup() %>%
ggplot(aes(tf_idf, fct_reorder(word, tf_idf), fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free") +
labs(x = "tf-idf", y = "Term Frequency") + plot_theme
ggexport(plotlist = list(book_tf_idf_plot),
filename = "plots/book_tf_idf_plot.png",width=800,height = 1000)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
setwd("~/GitHub/Encoding/docs/RandTextAnalysis")
library("RDSTK")
library("readr")
library("qdap")
library("syuzhet")
library("ggplot2")
library("dplyr")
gaga = read_file("assets/lady-gaga.txt")
View(gaga)
g_scores = get_nrc_sentiment(gaga)
class(g_scores)
g_scores
g_polarity = g_scores[1,9:10]
g_sentiment = g_scores[1,1:8]
class(g_polarity)
g_polarity = data.matrix(g_polarity, rownames.force = TRUE)
barplot(g_polarity)
class(g_sentiment)
g_sentiment = data.matrix(g_sentiment, rownames.force = TRUE)
barplot(g_sentiment)
g_speech_sen = get_sentences(gaga)
g_speech_sen
sentiment_vector = get_sentiment(g_speech_sen, method = "syuzhet")
sentiment_vector
summary(sentiment_vector)
